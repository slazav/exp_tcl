#!/usr/bin/tclsh

# current sweeper with stdin/stdout interface

package require Device 1.3
package require ParseOptions 2.0

#############################################################
## Command line options:
set options [list \
{-p -ps_dev}   ps_dev   {test}   {power supply device}\
{-d -db_dev}   db_dev   {}       {database device (can be empty)}\
{-n -db_val}   db_val   {}       {database name for numerical values}\
{-a -db_ann}   db_ann   {}       {database name for annatations}\
{-o -volt}     volt     {1}      {set voltage, V}\
{-o -ovp}      ovp      {1}      {set over-voltage protection }\
]

#############################################################

itcl::class SweepController {
  variable dev;  # device implementation handler
  variable rh;   # ramping loop handler
  variable curr; # current
  public variable min_t_step;  # min time step, s
  public variable min_i_step;  # min current step, A
  public variable max_rate;    # max rate, A/s
  public variable max_i;       # max current, A
  public variable min_i;       # min current, A
  public variable tolerance;   # how large can be difference between
                               # set and measured current, A
  public variable ps_dev
  variable db_dev
  variable db_val
  variable db_ann
  variable volt
  variable ovp

  constructor {opts} {
    #Parse options.
    global options
    parse_options "sweeper" $opts $options

    if {$ps_dev  == {} } { error "ps_dev is empty" }
    set d [Device $ps_dev]
    $ps_dev lock

    # Open devices.
    if {$db_dev != {} } { Device $db_dev }

    set rh {}
    set model [$ps_dev get_model]
    set dev [current_supply_devices::$model #auto SweepController::$ps_dev]
    reset
  }
  destructor {
    $ps_dev unlock
  }

  method set_curr {val} { $dev set_curr $val }
  method get_curr {}    { return [ $dev get_curr ]}
  method get_volt {}    { return [ $dev get_volt ]}

  # Return list of commands which can be run from stdin.
  method list {} {return {list sweep sweep_stop reset get_curr get_volt} }

  ######################################
  # stop sweep and reset device
  method reset {} {
    if { $db_dev != {} && $db_val != {} } {
      $db_dev cmd "put $db_ann now reset"
      $db_dev cmd "sync"
    }
    after cancel $rh
    set $rh {}
    $dev reset $volt $ovp
    set curr [get_curr]
    return
  }

  ######################################
  # stop sweep and reset device
  method sweep_stop {} {
    if {$rh != {} && $db_dev != {} && $db_val != {} } {
      $db_dev cmd "put $db_ann now sweep_stop"
      $db_dev cmd "sync"
    }
    after cancel $rh
    return
  }

  ######################################
  method sweep {dest rate {first 1}} {

    # write annotation in the beginning of the sweep
    if {$first && $db_dev != {} && $db_ann != {} } {
      $db_dev cmd "put $db_ann now sweep to $dest A at $rate A/s"
      $db_dev cmd "sync"
    }

    after cancel $rh

    set min_t_step [$dev get_min_t_step]
    set min_i_step [$dev get_min_i_step]
    set max_rate   [$dev get_max_rate]
    set max_i [$dev get_max_i]
    set min_i [$dev get_min_i]
    set tolerance [$dev get_tolerance]

    if {$dest > $max_i} {set dest $max_i}
    if {$dest < $min_i} {set dest $min_i}
    if {$rate > $max_rate} {set rate $max_rate}

    # put current value in the database
    set curr_meas [get_curr]
    if { $db_dev != {} && $db_val != {}} {
      $db_dev cmd "put $db_val now $curr_meas $curr [get_volt]"
      $db_dev cmd "sync"
    }

    if {$curr < $dest} {set dir 1} else {set dir -1}

    # time step for fast/slow sweeps:
    if { $rate > [expr {$min_i_step/$min_t_step}] } {
      set dt $min_t_step
    } else {
      set dt [expr {$min_i_step/$rate}]
    }
    # set current step
    set di [expr {1.0*$dir*$rate*$dt}]


    # stop ramping if the real current is outside the tolerance
    if { [expr {abs($curr_meas-$curr)}] > $tolerance } {
      set curr $curr_meas
      if { $db_dev != {} && $db_ann != {}} {
        $db_dev cmd "put $db_ann now current jump to $curr"
        $db_dev cmd "sync"
      }
      return
    }

    # calculate time step in ms (1 ms - limit) and set up ramping loop
    set dt_ms [expr {round(1000*$dt)}]
    if {$dt_ms < 1} {set dt_ms 1}

    # stop ramping if we are near the destination
    if { [expr {abs($curr-$dest)}] < [expr {abs($di)}] } {
      set_curr $dest
      # normal delay between current setting and measurement
      after $dt_ms
      set curr [get_curr]
      if { $db_dev != {} && $db_val != {}} {
        $db_dev cmd "put $db_val now $curr $dest [get_volt]"
        $db_dev cmd "sync"
      }
      if { $db_dev != {} && $db_ann != {}} {
        $db_dev cmd "put $db_ann now sweep finished at $curr"
        $db_dev cmd "sync"
      }
      return
    }

    # change the current
    set curr [expr {$curr + 1.0*$dir*$rate*$dt}]
    set_curr $curr

    set rh [after $dt_ms "$this sweep $dest $rate 0"]
    return
  }
}

#############################################################
## device implementations:
namespace eval current_supply_devices {

  ######################################
  # Tenma 72-2550
  itcl::class tenma_72-2550 {
    variable ps_dev

    ## set device parameters and reset device
    constructor {conn} { set ps_dev $conn }
    method get_min_t_step {} {return 0.2}
    method get_min_i_step {} {return 0.001}
    method get_max_rate   {} {return 1}
    method get_max_i      {} {return 3.09}
    method get_min_i      {} {return 0}
    method get_tolerance  {} {return 0.01}

    method reset {volt ovp} {
      ## set voltage if needed
      if { $volt > 0 } {
        set volt [expr {round($volt*100)/100.0}]
        $ps_dev cmd "VSET1:$volt"
      }
      ## set OVP if needed
      if { $ovp != {} && $ovp != 0 } {
        $ps_dev cmd "OVP1"
      } else {
        $ps_dev cmd "OVP0"
      }
      ## set current to actual current, turn output on
      set status [$ps_dev cmd "STATUS?"]
      set c [$ps_dev cmd "IOUT1?"]
      $ps_dev cmd "ISET1:$c"
      $ps_dev cmd "OUT1"
    }

    method set_curr {val} {
      set val [expr {round($val*1000)/1000.0}]
      $ps_dev cmd "ISET1:$val"
    }
    method get_curr {} {
      return [$ps_dev cmd "IOUT1?"]
    }
    method get_volt {} {
      return [$ps_dev cmd "VOUT1?"]
    }
  }



}

#############################################################

cli::run SweepController $argv
