======================================================================
    Command line protocol
======================================================================

There are two programs, "server" and "client". Client opens connection
with the server, send requests, get answers.

Normally server is a program with a command line interface, called by a
user or another program. All data are read and written line by line in a
human-readable form if possible.

When connection is opened, server writes a line with the special symbol
('#' in this example, but it can be any symbol), protocol name and
version: "#SPP001". Then it can write some text for the user which can be
ignored. Then it either writes '#Error: <message>' and exits or writes
'#OK' and start listening for user requests. Simbol '#' here is a special
symbol which was selected in the beginning of the conversation.

Request is one line of text.
TODO: splitting arguments, quoting, several lines...

Answer of the server is a few lines of text, followed by '#Error:
<message>' or '#OK' line. Lines of the answer text starting with the
'#' symbol should be protected by doubling the symbol.
TODO: timeouts, safe closing of the channel...

======================================================================
Conversation example (see server_example program):
======================================================================

$ ./server_example
#SPP001
Welcome, dear user!
Please, type "help" if you do not know what to do.
#OK
h
#Error: Unknown command: h
help
server_example -- an example of the command-line interface program.
Commands:
  write <k> <v> -- write value v into a memory slot k=0..9
  read <k>      -- read value from a memory slot k
  list -- list all commands
  help -- show this message

#OK
write 1 abc
#OK
read
#Error: wrong # args: should be "testSrv0 read k"
read 1
abc
#OK

======================================================================
TCL interface
======================================================================

There is a simple tcl library to implement the protocol. To write the
server create an Itcl class with all needed commands (each gets any
number of argumets and returns answer or throws an error) and "list"
command which returns all command names which should be available through
the interface. Then run:

  cl_server::run $server_class $opts

To create a connection to a server:
  cl_client conn $prog_name

and run commands
  conn cmd <command>

See ./server_example and ./client_example programs
