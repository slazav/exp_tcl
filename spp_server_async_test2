#!/usr/bin/tclsh

source spp_server_async.tcl

# More complicated async server example:
# wait command is added which waits for
# modification of $var and returns it

# The problem is to avoid nested vwait calls,
# see https://www.tcl.tk/man/tcl/TclCmd/vwait.htm

# Here we use spp_server_async library

itcl::class TestSrv {
  variable var
  variable rh {}
  variable tstep 1.0; # s

  constructor {args} {
    if {[catch {
      if {$args != {}} {error "no arguments needed: $args"}
      reset
    }]} {spp_server_async::err}
  }

  method get {} {
    spp_server_async::ans $var
  }

  method reset {} {
    after cancel $rh
    set var 0
    set rh [after idle $this loop]
    spp_server_async::ans
  }

  # Wait until variable will be set and print it
  method wait {} {
    trace add variable var write "$this on_var_set"
    return $var
  }
  method on_var_set {n1 n2 op} {
    trace remove variable var write "$this on_var_set"
    spp_server_async::ans $var
  }

  # generate two answers (it will be a fatal error)
  method twoanswers {} {
    spp_server_async::ans $var
    after 2000 $this twoanswers
  }

  method loop {} {
    after cancel $rh
    # errors in the loop should be ignored!
    if {[catch {
      incr var
      if {$var > 20} {spp_server_async::fatal "value is too high"}
    }]} {spp_server_async::fatal}
    set rh [after [expr int($tstep*1000)] $this loop]
  }
}

spp_server_async::list {list get reset wait twoanswers}
spp_server_async::run TestSrv {*}$argv
